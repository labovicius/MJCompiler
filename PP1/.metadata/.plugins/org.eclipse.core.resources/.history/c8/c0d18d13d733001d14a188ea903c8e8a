package rs.ac.bg.etf.pp1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;

import org.apache.log4j.FileAppender;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

import java_cup.runtime.Symbol;
import rs.ac.bg.etf.pp1.ast.Program;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;

public class Compiler {

	private static Logger loge = Logger.getLogger("error");
	private static Logger log = Logger.getLogger("info");
	
	private static FileAppender fa,fae;
	
	static {
		fa = new FileAppender();
		fa.setLayout(new PatternLayout(PatternLayout.DEFAULT_CONVERSION_PATTERN));
		
		fae = new FileAppender();
		fae.setLayout(new PatternLayout(PatternLayout.DEFAULT_CONVERSION_PATTERN));
	}

	public static void main(String[] args) throws Exception {

		if (args.length < 2) {
			log.error("Nema dovoljno argumenata! ( Ocekivani ulaz: <ulaz>.mj <izlaz>.obj )");
			return;
		}
		
		File sourceCode = new File(args[0]);

		if (!sourceCode.exists()) {
			log.error("Ulazni fajl [" + sourceCode.getAbsolutePath() + "] nije pronadjen!");
			return;
		}

		if(args.length==3 || args.length==4) {
				String out = args[2].substring(1);
				String err = "";
				if(args.length==4) {
					err = args[3].substring(2);
					PrintWriter pw = new PrintWriter("test/"+err);
					pw.close();
				}
						
				PrintWriter pw = new PrintWriter("test/"+out);
				pw.close();
				
				if(err.equals("")) {
					fa.setFile("test/"+out);
					fae.setFile("test/"+out);
					fa.activateOptions();
					fae.activateOptions();
					log.addAppender(fa);
					log.addAppender(fae);
				} else {
					fa.setFile("test/"+out);
					fae.setFile("test/"+err);
					fa.activateOptions();
					fae.activateOptions();
					log.addAppender(fa);
					loge.addAppender(fae);
				}
				
			}
			
			log.info("Kompajliranje ulaznog fajla " + sourceCode.getPath());
			
			try (BufferedReader br = new BufferedReader(new FileReader(sourceCode))) {
				
				Yylex lexer = new Yylex(br);			
				MJParser p = new MJParser(lexer);
				
				if (p.getErrorDetected()) {
					loge.info("Ulazni fajl " + args[0] + " ima sintaksne greske!");
					return;
				}
				Symbol sym = p.parse();
				Program prog = (Program) sym.value;
				
				log.info("=====================SINTAKSNO_STABLO=========================");
				log.info("\n" + prog.toString(""));
				
				log.info("\n\n================SEMANTICKA OBRADA====================\n");			
				Tab.init(); 

				SemanticPass semanticCheck = new SemanticPass();
				prog.traverseBottomUp(semanticCheck);

				tsdump();
				
				if (!semanticCheck.getErrorDetected()) {
				
				log.info("Sintaksna i semanticka analiza uspesno zavrsena!");								
					
				CodeGenerator cg = new CodeGenerator(semanticCheck.getProgram()); 
				prog.traverseBottomUp(cg);				

				File objFile = new File(args[1]); 
				if (objFile.exists()) objFile.delete();	
			
				
				Code.dataSize = semanticCheck.nVars;
				Code.mainPc = cg.getMainPc();
							
				Code.write(new FileOutputStream(objFile));			
				log.info("Parsiranje uspesno zavrseno!");
		
				}
				else {
					loge.error ("Parsiranje nije uspesno zavrseno!");	
				}
			}									
	}	
	public static void tsdump() {
		MyTableDumpVisitor tv = new MyTableDumpVisitor();
		Tab.dump(tv);
	}

}