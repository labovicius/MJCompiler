package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

	public boolean getErrorDetected() {
		return errorDetected;
	}


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, MINUS, MUL, DIV, MOD, COMMA, PRINT, READ, VOID, AND, OR;
terminal LBRACKET, RBRACKET, CONST, CONTINUE, BREAK, DO, WHILE, INC, DEC, NEQUAL, GT, GE, LT, LE, NEW, EXPONENT, RECORD;
terminal COLON, EXTENDS, DOT, EQUALS, CLASS, QUESTION, DQUESTION, CASE, ENUM, SWITCH;
terminal Integer NUMBER;

terminal Character CHARCONST;
terminal Boolean BOOLCONST;
terminal String IDENT;
terminal IF, ELSE;


nonterminal AllDeclarations AllDeclarations;
nonterminal MethodVarDeclaration MethodVarDeclaration;
nonterminal MethodDeclList MethodDeclList;
nonterminal Declaration Declaration;
nonterminal ConstDeclarations ConstDeclarations;
nonterminal VarDeclarations VarDeclarations;
nonterminal RecordDeclarations RecordDeclarations;
nonterminal VarDeclarationCh VarDeclarationCh;
nonterminal VarDeclaration VarDeclaration;
nonterminal ConstDeclarationCh ConstDeclarationCh;
nonterminal ConstDeclaration ConstDeclaration;
nonterminal Condition Condition;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ExpopList ExpopList;
nonterminal Expop Expop;
nonterminal AddopCh AddopCh;
nonterminal MulopFactorCh MulopFactorCh;
nonterminal MethodParams MethodParams;
nonterminal OptArgs OptArgs;
nonterminal FormPars FormPars;
nonterminal FormPar FormPar;
nonterminal StatementList StatementList;
nonterminal FormalParamCh FormalParamCh;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Assignop Assignop;
nonterminal Mulop Mulop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal CondTerm CondTerm;
nonterminal CondCh CondCh;
nonterminal CondFact CondFact;
nonterminal CondTermCh CondTermCh;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ConstTypeDeclaration, Term, Factor, Expr, BaseExp, LeftQ, RightQ, Expr1;

Program ::= (Program) PROG ProgName:p AllDeclarations:A1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, A1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};


AllDeclarations	::= (AllDeclars) AllDeclarations:A1 Declaration:D2 {: RESULT=new AllDeclars(A1, D2); RESULT.setLine(A1left); :}
			        | 
			        (NoDeclarations) {: RESULT=new NoDeclarations(); :} /*epsilon*/
			        ;
			  
Declaration	::= (ConstDeclars) ConstDeclarations:C1 {: RESULT=new ConstDeclars(C1); RESULT.setLine(C1left); :}
			    | 
			    (VarDeclars) VarDeclarations:V1 {: RESULT=new VarDeclars(V1); RESULT.setLine(V1left); :}
			    |
			    (RecDeclars) RecordDeclarations:R1 {: RESULT=new RecDeclars(R1); RESULT.setLine(R1left); :}
			    ;

RecordDeclarations ::= (RecordDeclarations) RECORD IDENT:varName LBRACKET VarDeclarations:V1 RBRACKET {: RESULT=new RecordDeclarations(varName, V1); RESULT.setLine(varNameleft); :}
					;
VarDeclarations ::= (VarDeclarations) Type:varType VarDeclaration:V1 VarDeclarationCh:V2 SEMI {: RESULT=new VarDeclarations(varType, V1, V2); RESULT.setLine(varTypeleft); :}
				    ;
				    
VarDeclarationCh ::= (VarDeclarCh) VarDeclarationCh:V1 COMMA VarDeclaration:V2 {: RESULT=new VarDeclarCh(V1, V2); RESULT.setLine(V1left); :}
				   	 |  
					 (NoVarDeclar) {: RESULT=new NoVarDeclar(); :} /* epsilon */
					 ;
			    
VarDeclaration ::=  (VarDeclar) IDENT:varName {: RESULT=new VarDeclar(varName); RESULT.setLine(varNameleft); :}
					|
					(VarDeclarArr) IDENT:varArrName LBRACKET RBRACKET {: RESULT=new VarDeclarArr(varArrName); RESULT.setLine(varArrNameleft); :}
					|
					(VarError) error 
		            {: parser.report_error("Oporavak od greske u deklaraciji globalne promenljive", null); :} {: RESULT=new VarError(); :}
					;
							   
ConstDeclarations ::= (ConstDeclarations) CONST Type:typeConst ConstDeclaration:C1 ConstDeclarationCh:C2 SEMI {: RESULT=new ConstDeclarations(typeConst, C1, C2); RESULT.setLine(typeConstleft); :}
					;

ConstDeclarationCh  ::= (ConstDeclarsCh) ConstDeclarationCh:C1 COMMA ConstDeclaration:C2 {: RESULT=new ConstDeclarsCh(C1, C2); RESULT.setLine(C1left); :}
			  			|
			  			(NoConstDeclar) {: RESULT=new NoConstDeclar(); :} /*epsilon*/
			  			;

ConstDeclaration ::= (ConstDeclar) IDENT:nameConst EQUAL ConstTypeDeclaration:valConst {: RESULT=new ConstDeclar(nameConst, valConst); RESULT.setLine(nameConstleft); :};			   

ConstTypeDeclaration ::= (ConstDeclarNum)  NUMBER:numberConst {: RESULT=new ConstDeclarNum(numberConst); RESULT.setLine(numberConstleft); :}
			  			 |
			  			 (ConstDeclarChar) CHARCONST:charConst {: RESULT=new ConstDeclarChar(charConst); RESULT.setLine(charConstleft); :}
			  			 |
			  			 (ConstDeclarBool) BOOLCONST:boolConst {: RESULT=new ConstDeclarBool(boolConst); RESULT.setLine(boolConstleft); :}
			  			 ;
			  
Type ::= (Type) IDENT:nameType {: RESULT=new Type(nameType); RESULT.setLine(nameTypeleft); :};

MethodVarDeclaration ::= (MethodVarDecl) MethodVarDeclaration:M1 VarDeclarations:V2 {: RESULT=new MethodVarDecl(M1, V2); RESULT.setLine(M1left); :}
				|
				(NoMethodVarDecl) {: RESULT=new NoMethodVarDecl(); :} /*epsilon*/
				;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(MethodDeclO) MethodDecl:M1 {: RESULT=new MethodDeclO(M1); RESULT.setLine(M1left); :}
				;
				
MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN MethodParams:M2 RPAREN MethodVarDeclaration:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, M2, M3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodT) Type:retType IDENT:nameMeth {: RESULT=new MethodT(retType, nameMeth); RESULT.setLine(retTypeleft); :}
				   |
				   (MethodV) VOID IDENT:nameMeth {: RESULT=new MethodV(nameMeth); RESULT.setLine(nameMethleft); :}
				   ;

MethodParams ::= (MethodPars) FormPars:F1 OptArgs:O2 {: RESULT=new MethodPars(F1, O2); RESULT.setLine(F1left); :};

OptArgs ::= (OptionArgs) SEMI Type:argType IDENT:optPar EQUAL ConstTypeDeclaration:C1 {: RESULT=new OptionArgs(argType, optPar, C1); RESULT.setLine(argTypeleft); :}
			|
	        (NoOptionArgs) {: RESULT=new NoOptionArgs(); :} /*epsilon*/
		  	;

FormPars ::= (FormParams) FormPar:F1 FormalParamCh:F2 {: RESULT=new FormParams(F1, F2); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /*epsilon*/
		  ;

FormalParamCh ::= (FormParamCh) FormalParamCh:F1 COMMA FormPar:F2 {: RESULT=new FormParamCh(F1, F2); RESULT.setLine(F1left); :}
  				|
		  		(NoFormParamCh) {: RESULT=new NoFormParamCh(); :} /*epsilon*/
		  		;
		  			
FormPar ::= (FormParam) Type:T1 IDENT:formPar {: RESULT=new FormParam(T1, formPar); RESULT.setLine(T1left); :}
			|
			(FormParamArr) Type:T1 IDENT:arrFormPar LBRACKET RBRACKET {: RESULT=new FormParamArr(T1, arrFormPar); RESULT.setLine(T1left); :}
			|
		    (ParamError) error 
		    {: parser.report_error("Oporavak od greske u definiciji formalnih parametara funkcije", null); :} {: RESULT=new ParamError(); :}
			;
	
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /*epsilon*/
				;
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   ; 

Unmatched ::= (UnmatchedIf) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); :}
		 	|
		 	(UnmatchedIfElse) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :}
			|
			(IfCondError) IF LPAREN error RPAREN
            {: this.parser.report_error("Oporavak od greske u logickom izrazu if konstrukcije", null); :} {: RESULT=new IfCondError(); :}
		 	;
		 
				
Matched ::=  (DesStmt)  DesignatorStatement:D1 SEMI {: RESULT=new DesStmt(D1); RESULT.setLine(D1left); :}
		   |
		   error SEMI:l
		   {: this.parser.report_error("Oporavak od greske pri dodeli iskaza",null); :} {: RESULT=new MatchedDerived1(); :}
		   |
		   (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
		   |
		   (PrintNumStmt) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintNumStmt(E1, N2); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:E1 SEMI {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (ContinueExpr) CONTINUE SEMI {: RESULT=new ContinueExpr(); :}
		   |
		   (BreakExpr) BREAK SEMI {: RESULT=new BreakExpr(); :}
		   |
		   (ListStmt) LBRACE StatementList:S1 RBRACE {: RESULT=new ListStmt(S1); RESULT.setLine(S1left); :}
		   |
		   (DoWhileExpr) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN	SEMI {: RESULT=new DoWhileExpr(S1, C2); RESULT.setLine(S1left); :}
		   |
		   (MatchedStatement) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(C1, M2, M3); RESULT.setLine(C1left); :}
			;

DesignatorStatement ::= (DsgStmtEqual) Designator:d Assignop:A1 Expr:e {: RESULT=new DsgStmtEqual(d, A1, e); RESULT.setLine(dleft); :}
						|			
						(DsgStmtInc) Designator:d INC {: RESULT=new DsgStmtInc(d); RESULT.setLine(dleft); :}
						|			
						(DsgStmtDec) Designator:d DEC {: RESULT=new DsgStmtDec(d); RESULT.setLine(dleft); :}
						|			
						(DsgStmtPars) Designator:d LPAREN ActualPars:A1 RPAREN {: RESULT=new DsgStmtPars(d, A1); RESULT.setLine(dleft); :}
						;

Condition ::= (Condition) CondTerm:C1 CondCh:C2 {: RESULT=new Condition(C1, C2); RESULT.setLine(C1left); :};

CondCh ::= (CondOrCh) OR CondTerm:C1 {: RESULT=new CondOrCh(C1); RESULT.setLine(C1left); :}
			|  
			(NoCondCh) {: RESULT=new NoCondCh(); :} /*epsilon*/
			;

CondTerm ::= (CondTerm) CondFact:C1 CondTermCh:C2 {: RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); :};

CondTermCh ::= (CondAndCh) AND CondFact:C1 {: RESULT=new CondAndCh(C1); RESULT.setLine(C1left); :}
			|  
			(NoCondTermCh) {: RESULT=new NoCondTermCh(); :} /*epsilon*/
			;

CondFact ::= (CondFact1) Expr:E1 {: RESULT=new CondFact1(E1); RESULT.setLine(E1left); :} 
			 |
			 (CondFact2) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFact2(E1, R2, E3); RESULT.setLine(E1left); :} 
			 ;

Expr ::= (DQTerm) LeftQ:L1 DQUESTION RightQ:R2 {: RESULT=new DQTerm(L1, R2); RESULT.setLine(L1left); :}
		 |
		 (ExprOne) Expr1:E1 {: RESULT=new ExprOne(E1); RESULT.setLine(E1left); :}
		 ;

LeftQ ::= (LeftQuest) Expr1:E1 {: RESULT=new LeftQuest(E1); RESULT.setLine(E1left); :}
;

RightQ ::= (RightQuest) Expr1:E1 {: RESULT=new RightQuest(E1); RESULT.setLine(E1left); :}
;	

Expr1 ::= (NormalExpression) Term:T1 AddopCh:A2 {: RESULT=new NormalExpression(T1, A2); RESULT.setLine(T1left); :}
	  	 |
	 	 (MinusExpression) MINUS Term:T1 AddopCh:A2 {: RESULT=new MinusExpression(T1, A2); RESULT.setLine(T1left); :}
	 	 ;
			
AddopCh ::= (AddopCho) AddopCh:A1 Addop:A2 Term:T3 {: RESULT=new AddopCho(A1, A2, T3); RESULT.setLine(A1left); :}
			  |
			  (NoAddopCh) {: RESULT=new NoAddopCh(); :} /* epsilon */
			  ;

MulopFactorCh ::= (MulopFactorCho) MulopFactorCh:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorCho(M1, M2, F3); RESULT.setLine(M1left); :}
				|
				(NoMulopFactorCh) {: RESULT=new NoMulopFactorCh(); :} /* epsilon */
				;
				
Term ::= (TermFact) Factor:F1 MulopFactorCh:M2 {: RESULT=new TermFact(F1, M2); RESULT.setLine(F1left); :}
		 ;

Factor  ::= (ConstNum) NUMBER:N1 {: RESULT=new ConstNum(N1); RESULT.setLine(N1left); :}
		|
		(ConstChar) CHARCONST:C1 {: RESULT=new ConstChar(C1); RESULT.setLine(C1left); :}
		|
		(ConstBool) BOOLCONST:B1 {: RESULT=new ConstBool(B1); RESULT.setLine(B1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		| 
		(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		|
		(ParenExpr) LPAREN Expr:E1 RPAREN {: RESULT=new ParenExpr(E1); RESULT.setLine(E1left); :}
		|
		(NewType) NEW Type:T1 {: RESULT=new NewType(T1); RESULT.setLine(T1left); :}
		|
		(NewTypeArr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewTypeArr(T1, E2); RESULT.setLine(T1left); :}
		;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;

Designator ::= (DesignatorI) IDENT:desigName {: RESULT=new DesignatorI(desigName); RESULT.setLine(desigNameleft); :}
			   |
			   (DesignatorEx) IDENT:desigName LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorEx(desigName, E1); RESULT.setLine(desigNameleft); :}
			   ;

Assignop ::= (Assign) EQUAL {: RESULT=new Assign(); :}
			 |
			 (AssignError) EQUAL error
             {: parser.report_error("Oporavak od greske u konstrukciji iskaza dodele", null); :} {: RESULT=new AssignError(); :}
			 ;

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
	  |
	  (Minus) MINUS {: RESULT=new Minus(); :}
;

Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
	  |
	  (Div) DIV {: RESULT=new Div(); :}
	  |
	  (Mod) MOD {: RESULT=new Mod(); :}
;	

Relop    ::= (Equ) EQUALS {: RESULT=new Equ(); :}
		   | (NotEqu) NEQUAL {: RESULT=new NotEqu(); :}
		   | (Gt) GT {: RESULT=new Gt(); :}
		   | (Ge) GE {: RESULT=new Ge(); :}
		   | (Lt) LT {: RESULT=new Lt(); :}
		   | (Le) LE {: RESULT=new Le(); :}
		   ;